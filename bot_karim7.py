from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes from datetime import datetime

TOKEN = "7884639351:AAHekyYrrQjdRNBmT1NtlPjoRNLjLxGbz78" ADMIN_CHAT_ID = 805971875

–°–æ—Å—Ç–æ—è–Ω–∏–µ: –∫—Ç–æ –≤—ã–±—Ä–∞–ª –∫–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫

chosen_gifts = {}  # gift_key: user_id

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: keyboard = [ [InlineKeyboardButton("–ì–¥–µ –∏ –∫–æ–≥–¥–∞?", callback_data='place')], [InlineKeyboardButton("–ß—Ç–æ –±—É–¥–µ—Ç?", callback_data='program')], [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ (RSVP)", callback_data='rsvp')], [InlineKeyboardButton("üéÅ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data='wishlist')] ] reply_markup = InlineKeyboardMarkup(keyboard)

welcome_text = (
    "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!\n\n"
    "–Ø ‚Äî –ö–∞—Ä–∏–º, –∏ 10 –∏—é–ª—è –º–Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è 7 –ª–µ—Ç!\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–æ–π –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî –∑–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—é —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
    "–≥–¥–µ –º—ã –ø—Ä–∞–∑–¥–Ω—É–µ–º, –≤–æ —Å–∫–æ–ª—å–∫–æ, —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç –∏ –∫–∞–∫ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω—É—é!\n\n"
    "–ë—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ, —è—Ä–∫–æ –∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∫—Ä—É—Ç–æ!\n"
    "–†–∞–¥, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å!"
)
await update.message.reply_text(welcome_text, reply_markup=reply_markup)

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: query = update.callback_query await query.answer() user = query.from_user user_id = user.id name = user.full_name username = f"@{user.username}" if user.username else "(–±–µ–∑ username)" time = datetime.now().strftime("%d.%m %H:%M")

gifts = {
    'gift1': "LEGO Sonic 76998",
    'gift2': "LEGO Shadow 76995",
    'gift3': "–ü–∏–∂–∞–º–∞",
    'gift4': "–ú–∞—Å–∫–∞ –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è"
}

if query.data == 'place':
    await query.edit_message_text(
        "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è 10 –∏—é–ª—è –≤ 15:00\n"
        "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫, –ë–û ¬´–¢–æ–ø –õ–µ—Å¬ª\n\n"
        "–ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π ‚Äî –±—É–¥–µ—Ç –∫—Ä—É—Ç–æ!"
    )

elif query.data == 'program':
    await query.edit_message_text(
        "–¢–µ–±—è –∂–¥—ë—Ç:\n"
        "- –ö–∞—Ç–∞–Ω–∏–µ –Ω–∞ –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–∞—Ö\n"
        "- –õ–∞–∑–µ—Ä—Ç–∞–≥ –≤ –ª–µ—Å—É\n"
        "- –í–µ—Å—ë–ª—ã–µ —Ç–∞–Ω—Ü—ã —Å –±–æ–±—Ä–æ–º\n"
        "- –¢–æ—Ä—Ç –∏ –ø–æ–¥–∞—Ä–∫–∏\n"
        "- –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"
    )

elif query.data == 'rsvp':
    keyboard = [
        ["–Ø —Ç–æ—á–Ω–æ –ø—Ä–∏–¥—É!"],
        ["–ù–µ –ø–æ–ª—É—á–∏—Ç—Å—è("],
        ["–ü–æ–∫–∞ –Ω–µ —É–≤–µ—Ä–µ–Ω(–∞)"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await query.edit_message_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ:")
    await query.message.reply_text("–¢—ã –ø—Ä–∏–¥—ë—à—å –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫?", reply_markup=reply_markup)

elif query.data == 'wishlist':
    buttons = []
    for key, label in gifts.items():
        if key in chosen_gifts:
            buttons.append([InlineKeyboardButton(f"‚ùå {label} (—É–∂–µ –≤—ã–±—Ä–∞–Ω)", callback_data='unavailable')])
        else:
            buttons.append([InlineKeyboardButton(label, callback_data=key)])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=InlineKeyboardMarkup(buttons))

elif query.data in gifts:
    if query.data in chosen_gifts:
        await query.edit_message_text("–£–≤—ã, —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–ª–∏!")
    else:
        chosen_gifts[query.data] = user_id
        gift = gifts[query.data]
        notify = f"**{name}** ({username}) –≤—ã–±—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫: _{gift}_\n({time})"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=notify, parse_mode="Markdown")
        await query.edit_message_text(f"–°–ø–∞—Å–∏–±–æ! –¢—ã –≤—ã–±—Ä–∞–ª: {gift}")

elif query.data == 'unavailable':
    await query.answer("–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–ª–∏.", show_alert=True)

–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ RSVP

async def rsvp_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: user = update.message.from_user text = update.message.text time = datetime.now().strftime("%d.%m %H:%M")

await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç: ¬´{text}¬ª. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")

name = user.full_name
username = f"@{user.username}" if user.username else "(–±–µ–∑ username)"
notify = f"**{name}** ({username}) –≤—ã–±—Ä–∞–ª: _{text}_\n({time})"
await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=notify, parse_mode="Markdown")

–ó–∞–ø—É—Å–∫

def main(): app = Application.builder().token(TOKEN).build() app.add_handler(CommandHandler("start", start)) app.add_handler(CallbackQueryHandler(button_handler)) app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, rsvp_reply)) app.run_polling()

if name == "main": main()

