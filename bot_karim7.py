
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging

API_TOKEN = '7884639351:AAHekyYrrQjdRNBmT1NtlPjoRNLjLxGbz78'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

reserved_gifts = set()

gifts = [
    {
        "id": "gift1",
        "title": "LEGO Sonic: –ù–∞–∫–ª–∑ –∏ –≥–ª–∞–≤–Ω—ã–π –∏–∑—É–º—Ä—É–¥–Ω—ã–π —Ö—Ä–∞–º (76998)",
        "link": "https://ozon.ru/t/BFM5GSK"
    },
    {
        "id": "gift2",
        "title": "LEGO Sonic: –ü–æ–±–µ–≥ –µ–∂–∞ –®—ç–¥–æ—É (76995)",
        "link": "https://ozon.ru/t/HO96qWv"
    },
    {
        "id": "gift3",
        "title": "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π",
        "link": "https://ozon.ru/t/EvHJchU"
    },
    {
        "id": "gift4",
        "title": "–ü–∏–∂–∞–º–∞",
        "link": "https://ozon.ru/t/AsDmFZE"
    },
    {
        "id": "gift5",
        "title": "LEGO Sonic: –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –¢–µ–π–ª–∑–∞ –∏ —Å–∞–º–æ–ª—ë—Ç –¢–æ—Ä–Ω–∞–¥–æ (76991)",
        "link": "https://ozon.ru/t/fc8pBHB"
    },
    {
        "id": "gift6",
        "title": "–ü–æ–¥–≤–æ–¥–Ω–∞—è –º–∞—Å–∫–∞ Kuchenhaus (L/XL, —á—ë—Ä–Ω–∞—è)",
        "link": "https://ozon.ru/t/4Cf7LuR"
    },
]

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –Ø –ø—Ä–∏–¥—É", callback_data="rsvp_yes"),
        InlineKeyboardButton("‚ùå –ù–µ —Å–º–æ–≥—É", callback_data="rsvp_no"),
        InlineKeyboardButton("üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç", callback_data="view_wishlist")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø—Ä–∏–≥–ª–∞—à—ë–Ω –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ö–∞—Ä–∏–º–∞!

"
        "–ï–º—É –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è 7 –ª–µ—Ç!
"
        "–ü—Ä–∞–∑–¥–Ω—É–µ–º 10 –∏—é–ª—è –≤ 15:00
"
        "–ú–µ—Å—Ç–æ: –í—Å–µ–≤–æ–ª–æ–∂—Å–∫, –ë–û ¬´–¢–æ–ø –õ–µ—Å¬ª

"
        "–ë—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ! –ü—Ä–∏—Ö–æ–¥–∏!",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "rsvp_yes":
        await callback_query.message.answer("–ö–ª–∞—Å—Å! –ñ–¥—É —Ç–µ–±—è!")
    elif data == "rsvp_no":
        await callback_query.message.answer("–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –ë—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏!")
    elif data == "view_wishlist":
        for gift in gifts:
            if gift["id"] not in reserved_gifts:
                reserve_btn = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{gift['id']}")
                )
                await callback_query.message.answer(f"{gift['title']}
{gift['link']}", reply_markup=reserve_btn)
    elif data.startswith("reserve_"):
        gift_id = data.replace("reserve_", "")
        reserved_gifts.add(gift_id)
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ! –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —Ç–µ–ø–µ—Ä—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –°—é—Ä–ø—Ä–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
